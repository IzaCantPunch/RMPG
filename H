local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")
local Mouse = LocalPlayer:GetMouse()

-- New Color Constants
local RED_ACCENT_COLOR = Color3.fromRGB(146, 12, 12)
local SUBTLE_RED_TEXT_COLOR = Color3.fromRGB(211, 158, 158) -- For main UI title, and active tab text
local INACTIVE_GREY_TEXT_COLOR = Color3.fromRGB(170, 170, 170) -- For inactive tab text, and general descriptive text
local BACKGROUND_DARK_COLOR = Color3.fromRGB(10, 10, 10) -- Main UI background color
local ELEMENT_BACKGROUND_COLOR = Color3.fromRGB(15, 15, 15) -- Background for tabs and feature options
local INNER_ELEMENT_BACKGROUND_COLOR = Color3.fromRGB(20, 20, 20) -- Background for inner boxes (checkboxes, sliders, dropdowns)

local Library = {
  connections = {},
  Flags = {},
  Enabled = true,
  slider_drag = false,
  core = null,
  dragging = false,
  drag_position = null,
  start_position = null,
}
if not isfolder("Rise") then
  makefolder("Rise")
end
function Library:disconnect()
  for _, value in Library.connections do
    if not Library.connections[value] then
      continue
    end
    Library.connections[value]:Disconnect()
    Library.connections[value] = null
  end
end
function Library:clear()
  for _, object in CoreGui:GetChildren() do
    if object.Name ~= "Rise" then
      continue
    end
    object:Destroy()
  end
end
function Library:exist()
  if not Library.core then
    return
  end
  if not Library.core.Parent then
    return
  end
  return true
end
function Library:save_flags()
  if not Library.exist() then
    return
  end
  local flags = HttpService:JSONEncode(Library.Flags)
  writefile(`Rise/{game.GameId}.lua`, flags)
end

function Library:load_flags()
  if not isfile(`Rise/{game.GameId}.lua`) then
    Library.save_flags()
    return
  end
  local flags = readfile(`Rise/{game.GameId}.lua`)
  if not flags then
    Library.save_flags()
    return
  end
  Library.Flags = HttpService:JSONDecode(flags)
end
Library.load_flags()
Library.clear()
function Library:open()
  self.Container.Visible = true
  self.Mobile.Modal = true -- Assuming Mobile Modal is needed
  TweenService:Create(
    self.Container,
    TweenInfo.new(0.6, Enum.EasingStyle.Circular, Enum.EasingDirection.InOut),
    {
      Size = UDim2.new(0, 699, 0, 426),
    }
  ):Play()
  -- Shadow removed
end
function Library:close()
  -- Shadow removed
  local main_tween = TweenService:Create(
    self.Container,
    TweenInfo.new(0.6, Enum.EasingStyle.Circular, Enum.EasingDirection.InOut),
    {
      Size = UDim2.new(0, 0, 0, 0),
    }
  )
  main_tween:Play()
  main_tween.Completed:Once(function()
    if Library.enabled then
      return
    end
    self.Container.Visible = false
    self.Mobile.Modal = false -- Assuming Mobile Modal is needed
  end)
end
function Library:drag()
  if not Library.drag_position then
    return
  end
  if not Library.start_position then
    return
  end
  local delta = self.input.Position - Library.drag_position
  local position = UDim2.new(
    Library.start_position.X.Scale,
    Library.start_position.X.Offset + delta.X,
    Library.start_position.Y.Scale,
    Library.start_position.Y.Offset + delta.Y
  )
  TweenService:Create(
    self.container.Container,
    TweenInfo.new(0.2),
    {
      Position = position,
    }
  ):Play()
  -- Shadow removed, so no tween for it
end
function Library:visible()
  Library.enabled = not Library.enabled
  if Library.enabled then
    Library.open(self)
  else
    Library.close(self)
  end
end
function Library.__init()
  local container = Instance.new("ScreenGui")
  container.Name = "Rise"
  container.Parent = CoreGui
  Library.core = container

  local Shadow = Instance.new("ImageLabel")
  Shadow.Name = "Shadow"
  Shadow.Parent = container
  Shadow.Visible = false -- Explicitly hidden
  Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
  Shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
  Shadow.BackgroundTransparency = 1.000
  Shadow.BorderColor3 = Color3.fromRGB(0, 0, 0)
  Shadow.BorderSizePixel = 0
  Shadow.Position = UDim2.new(0.508668244, 0, 0.5, 0)
  Shadow.Size = UDim2.new(0, 776, 0, 509)
  Shadow.ZIndex = 0
  Shadow.Image = "rbxassetid://17290899982"
  Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)

  local Container = Instance.new("Frame")
  Container.Name = "Container"
  Container.Parent = container
  Container.AnchorPoint = Vector2.new(0.5, 0.5)
  Container.BackgroundColor3 = BACKGROUND_DARK_COLOR -- Dark background
  Container.BackgroundTransparency = 0.8 -- More transparent
  Container.BorderColor3 = RED_ACCENT_COLOR -- Red border
  Container.BorderSizePixel = 2 -- Thin outline
  Container.ClipsDescendants = true
  Container.Position = UDim2.new(0.5, 0, 0.5, 0)
  Container.Size = UDim2.new(0, 699, 0, 426)

  local ContainerCorner = Instance.new("UICorner")
  ContainerCorner.CornerRadius = UDim.new(0, 8) -- Sharper corner
  ContainerCorner.Parent = Container

  -- Script Title ("Buwu")
  local ScriptTitle = Instance.new("TextLabel")
  ScriptTitle.Name = "ScriptTitle"
  ScriptTitle.Parent = Container
  ScriptTitle.AnchorPoint = Vector2.new(0, 0)
  ScriptTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  ScriptTitle.BackgroundTransparency = 1.000
  ScriptTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
  ScriptTitle.BorderSizePixel = 0
  ScriptTitle.Position = UDim2.new(0.04, 0, 0.04, 0) -- Top-left positioning
  ScriptTitle.Size = UDim2.new(0.2, 0, 0, 20) -- Use offset height as it's cleaner for specific font sizes
  ScriptTitle.FontFace = Font.new("rbxasset://fonts/families/Montserrat.json", Enum.FontWeight.SemiBold)
  ScriptTitle.Text = "Buwu"
  ScriptTitle.TextColor3 = SUBTLE_RED_TEXT_COLOR -- Matches Buwu's subtle title color
  ScriptTitle.TextScaled = false -- Don't scale, use explicit size
  ScriptTitle.TextSize = 16 -- Explicit text size
  ScriptTitle.TextWrapped = true
  ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left
  ScriptTitle.ZIndex = 3

  -- Buwu Logo/Icon
  local BuwuIcon = Instance.new("ImageLabel")
  BuwuIcon.Name = "BuwuIcon"
  BuwuIcon.Parent = ScriptTitle -- Parented to ScriptTitle for relative positioning
  BuwuIcon.BackgroundTransparency = 1
  BuwuIcon.Image = "rbxassetid://134992015790041" -- Placeholder: Use a suitable icon
  BuwuIcon.ImageColor3 = SUBTLE_RED_TEXT_COLOR
  BuwuIcon.Size = UDim2.new(0, 20, 0, 20)
  BuwuIcon.Position = UDim2.new(-0.25, 0, 0, 0) -- Positioned to the left of the text
  BuwuIcon.AnchorPoint = Vector2.new(0, 0)
  BuwuIcon.ZIndex = 3

  -- Vertical Separator Line
  local Line = Instance.new("Frame")
  Line.Name = "Line"
  Line.Parent = Container
  Line.BackgroundColor3 = RED_ACCENT_COLOR -- Red color
  Line.BorderColor3 = Color3.fromRGB(0, 0, 0)
  Line.BorderSizePixel = 0
  Line.Position = UDim2.new(0.296137333, 0, 0, 0) -- Full height, 1px wide
  Line.Size = UDim2.new(0, 1, 1, 0)

  -- Tab Navigation Section (Frame - No Scrolling)
  local tabs = Instance.new("Frame")
  tabs.Name = "Tabs"
  tabs.Active = true
  tabs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  tabs.BackgroundTransparency = 1.000
  tabs.BorderColor3 = Color3.fromRGB(0, 0, 0)
  tabs.BorderSizePixel = 0
  tabs.Position = UDim2.new(0, 0, 0, 0) -- Occupy left portion of container
  tabs.Size = UDim2.new(Line.Position.X.Scale, Line.Position.X.Offset, 1, 0)
  tabs.ClipsDescendants = true
  tabs.Parent = Container

  local tabslist = Instance.new("UIListLayout")
  tabslist.Parent = tabs
  tabslist.HorizontalAlignment = Enum.HorizontalAlignment.Center
  tabslist.SortOrder = Enum.SortOrder.LayoutOrder
  tabslist.Padding = UDim.new(0, 15) -- Spacing between tabs

  local UIPadding = Instance.new("UIPadding")
  UIPadding.Parent = tabs
  UIPadding.PaddingTop = UDim.new(0, 55) -- Padding below ScriptTitle

  local tabsCorner = Instance.new("UICorner")
  tabsCorner.Parent = tabs

  local TweenService = game:GetService("TweenService")

  local mobile_button = Instance.new("TextButton")
  mobile_button.Name = "Mobile"
  mobile_button.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
  mobile_button.BorderColor3 = RED_ACCENT_COLOR
  mobile_button.BorderSizePixel = 1
  mobile_button.Position = UDim2.new(0.5, -300, 0.8, 33) -- Default position
  mobile_button.Size = UDim2.new(0, 55, 0, 38)
  mobile_button.AutoButtonColor = false
  mobile_button.Modal = true
  mobile_button.FontFace = Font.new(
    "rbxasset://fonts/families/Montserrat.json",
    Enum.FontWeight.SemiBold
  )
  mobile_button.Text = ""
  mobile_button.TextColor3 = Color3.fromRGB(0, 0, 0)
  mobile_button.TextSize = 14.000
  mobile_button.Parent = container

  local userInputService = game:GetService("UserInputService")

  local deviceType
  if userInputService.GamepadEnabled then
    deviceType = "Controller"
  elseif userInputService.TouchEnabled then
    deviceType = "Mobile"
  else
    deviceType = "PC"
  end

  local defaultPosition = UDim2.new(0.5, -300, 0.8, 33)
  local newPosition1 = UDim2.new(0.5, 0.5)

  local ctrlDown = false
  local cDown = false

  local function tweenPosition(targetPosition)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
    local goal = {
      Position = targetPosition,
    }
    local tween = TweenService:Create(mobile_button, tweenInfo, goal)
    tween:Play()
  end

  local function onInputBegan(input, gameProcessed)
    if gameProcessed then
      return
    end

    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
      ctrlDown = true
    elseif input.KeyCode == Enum.KeyCode.C then
      cDown = true
    elseif input.KeyCode == Enum.KeyCode.P and ctrlDown and cDown then
      tweenPosition(newPosition1)
    elseif input.KeyCode == Enum.KeyCode.B and ctrlDown and cDown then
      tweenPosition(defaultPosition)
    end
  end

  local function onInputEnded(input)
    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
      ctrlDown = false
    elseif input.KeyCode == Enum.KeyCode.C then
      cDown = false
    end
  end

  UserInputService.InputBegan:Connect(onInputBegan)
  UserInputService.InputEnded:Connect(onInputEnded)

  local UIS = game:GetService("UserInputService")
  local TweenService = game:GetService("TweenService")

  local dragging, dragInput, dragStart, startPos
  local mobileVisible = true

  local function update(input)
    local delta = input.Position - dragStart
    local newPos = UDim2.new(
      startPos.X.Scale,
      startPos.X.Offset + delta.X,
      startPos.Y.Scale,
      startPos.Y.Offset + delta.Y
    )

    TweenService:Create(
      mobile_button,
      TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
      {
        Position = newPos,
      }
    ):Play()
  end

  mobile_button.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
      dragging = true
      dragStart = input.Position
      startPos = mobile_button.Position

      input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
          dragging = false
        end
      end)
    end
  end)

  mobile_button.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
      dragInput = input
    end
  end)

  UIS.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
      update(input)
    end
  end)
  local UICorner = Instance.new("UICorner")
  UICorner.CornerRadius = UDim.new(0, 5) -- Sharper corner
  UICorner.Parent = mobile_button
  local shadowMobile = Instance.new("ImageLabel")
  shadowMobile.Name = "Shadow"
  shadowMobile.Parent = mobile_button
  shadowMobile.AnchorPoint = Vector2.new(0.5, 0.5)
  shadowMobile.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  shadowMobile.BackgroundTransparency = 1.000
  shadowMobile.BorderColor3 = Color3.fromRGB(0, 0, 0)
  shadowMobile.BorderSizePixel = 0
  shadowMobile.Position = UDim2.new(0.5, 0, 0.5, 0)
  shadowMobile.Size = UDim2.new(0, 65, 0, 58)
  shadowMobile.ZIndex = 0
  shadowMobile.Image = "rbxassetid://17183270335"
  shadowMobile.ImageTransparency = 0.500
  shadowMobile.ImageColor3 = RED_ACCENT_COLOR -- Red shadow

  local Icon = Instance.new("ImageLabel")
  Icon.Name = "Icon"
  Icon.Parent = mobile_button
  Icon.AnchorPoint = Vector2.new(0.5, 0.5)
  Icon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  Icon.BackgroundTransparency = 1.000
  Icon.BorderColor3 = Color3.fromRGB(0, 0, 0)
  Icon.BorderSizePixel = 0
  Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
  Icon.Size = UDim2.new(0, 30, 0, 30)
  Icon.Image = "rbxassetid://134992015790041" --// [rbxassetid://secret]
  Icon.ImageColor3 = RED_ACCENT_COLOR -- Red icon

  if deviceType == "PC" then
    mobile_button.Visible = false
    shadowMobile.Visible = false
    Icon.Visible = false
  else
    mobile_button.Visible = true
    shadowMobile.Visible = true
    Icon.Visible = true
  end

  local f = function(o)
    local x = ""
    for z, n in ipairs(o) do
      x = x .. string.char(n)
    end
    return x
  end

  local TweenService = game:GetService("TweenService")

  mobile_button.AnchorPoint = Vector2.new(0.5, 0.5)
  shadowMobile.AnchorPoint = Vector2.new(0.5, 0.5)
  Icon.AnchorPoint = Vector2.new(0.5, 0.5)

  local function hideButton()
    local hideTweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Circular, Enum.EasingDirection.InOut)
    TweenService:Create(
      mobile_button,
      hideTweenInfo,
      {
        Size = UDim2.new(0, 0, 0, 0),
      }
    ):Play()
    TweenService:Create(
      shadowMobile,
      hideTweenInfo,
      {
        Size = UDim2.new(0, 0, 0, 0),
      }
    ):Play()
    TweenService:Create(
      Icon,
      hideTweenInfo,
      {
        Size = UDim2.new(0, 0, 0, 0),
      }
    ):Play()
  end

  local function showButton()
    local showTweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Circular, Enum.EasingDirection.InOut)
    TweenService:Create(
      mobile_button,
      showTweenInfo,
      {
        Size = UDim2.new(0, 85, 0, 38),
      }
    ):Play()
    TweenService:Create(
      shadowMobile,
      showTweenInfo,
      {
        Size = UDim2.new(0, 100, 0, 58),
      }
    ):Play()
    TweenService:Create(
      Icon,
      showTweenInfo,
      {
        Size = UDim2.new(0, 35, 0, 35),
      }
    ):Play()
  end

  UIS.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftAlt or input.KeyCode == Enum.KeyCode.RightAlt then
      mobileVisible = not mobileVisible
      if mobileVisible then
        showButton()
      else
        hideButton()
      end
    end
  end)

  container.Container.InputBegan:Connect(function(input: InputObject)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
      Library.dragging = true
      Library.drag_position = input.Position
      Library.start_position = container.Container.Position

      input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
          Library.dragging = false
          Library.drag_position = null
          Library.start_position = null
        end
      end)
    end
  end)

  local k = (function()
    local l = {}
    l["call"] = function(_, v)
      p(v)
    end
    return l
  end)()

  UserInputService.InputChanged:Connect(function(input: InputObject)
    if
      Library.dragging and (
        input.UserInputType == Enum.UserInputType.MouseMovement or
        input.UserInputType == Enum.UserInputType.Touch
      )
    then
      Library.drag({
        input = input,
        container = container,
      })
    end
  end)

  UserInputService.InputBegan:Connect(function(input, process)
    if process then
      return
    end

    if not Library.exist() then
      return
    end

    if getgenv().Keycode_Enabled == true then
      if input.KeyCode == Enum.KeyCode.RightControl then
        Library.visible(container)
      end
    else
      if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
        Library.visible(container)
      end
    end
  end)

  mobile_button.MouseButton1Click:Connect(function()
    Library.visible(container)
  end)

  local Tab = {}

  function Tab:update_sections()
    self.left_section.Visible = true
    self.right_section.Visible = true

    -- Hide all other sections
    for _, object in Container:GetChildren() do
      -- Ensure it's a section (ends with "Section"), but not the current active ones
      if
        object.Name:find("Section$") and
        object ~= self.left_section and
        object ~= self.right_section
      then
        object.Visible = false
      end
    end
  end

  function Tab:open_tab()
    Tab.update_sections({
      left_section = self.left_section,
      right_section = self.right_section,
    })

    -- Set properties for the selected tab
    self.tab.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
    self.tab.TextLabel.TextColor3 = SUBTLE_RED_TEXT_COLOR -- Active tab text color (subtle red)
    self.tab.TextLabel.TextTransparency = 0 -- Fully opaque text
    self.tab.LeftAccent.Visible = true
    self.tab.Icon.ImageColor3 = SUBTLE_RED_TEXT_COLOR -- Active icon color

    -- Remove text gradient when active
    if self.tab.TextLabel:FindFirstChildOfClass("UIGradient") then
      self.tab.TextLabel:FindFirstChildOfClass("UIGradient"):Destroy()
    end

    -- Main tab content sections positioning
    local tabsAreaRight = tabs.AbsolutePosition.X + tabs.AbsoluteSize.X -- Absolute X of right edge of tabs
    local lineThickness = Line.Size.X.Offset
    local contentAreaStartOffsetX = tabsAreaRight + lineThickness -- Absolute X where content starts

    local totalContentWidth =
      Container.AbsoluteSize.X - (contentAreaStartOffsetX - Container.AbsolutePosition.X) -- Width from start of content area to right edge of container

    local sectionSpacing = 30 -- Gap between sections
    local sectionWidth = (totalContentWidth - sectionSpacing) / 2 -- Width for each of the two sections

    self.left_section.Position = UDim2.new(0, contentAreaStartOffsetX - Container.AbsolutePosition.X + 15, 0, 0) -- X relative to container, plus 15px padding
    self.left_section.Size = UDim2.new(0, sectionWidth, 1, 0) -- Full height

    self.right_section.Position = UDim2.new(
      0,
      contentAreaStartOffsetX - Container.AbsolutePosition.X + 15 + sectionWidth + sectionSpacing,
      0,
      0
    ) -- After left_section + spacing
    self.right_section.Size = UDim2.new(0, sectionWidth, 1, 0) -- Full height

    for _, object in tabs:GetChildren() do
      if object.Name ~= "Tab" then
        continue
      end

      if object == self.tab then
        continue
      end

      -- Set properties for other (inactive) tabs
      object.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      object.TextLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR
      object.TextLabel.TextTransparency = 0 -- Base transparency (gradient applies fade)
      object.Icon.ImageColor3 = INACTIVE_GREY_TEXT_COLOR -- Inactive icon color

      -- Add text gradient for fading effect if not present
      if not object.TextLabel:FindFirstChildOfClass("UIGradient") then
        local TextGradient = Instance.new("UIGradient")
        TextGradient.Transparency = NumberSequence.new({
          NumberSequenceKeypoint.new(0, 0),
          NumberSequenceKeypoint.new(0.7, 0),
          NumberSequenceKeypoint.new(1, 1),
        })
        TextGradient.Parent = object.TextLabel
      end

      -- Make LeftAccent invisible for other tabs
      if object:FindFirstChild("LeftAccent") then
        object.LeftAccent.Visible = false
      end
    end
  end

  function Tab:create_tab(tab_name, icon_id)
    local tab = Instance.new("TextButton")
    tab.Name = "Tab"
    tab.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
    tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
    tab.BorderSizePixel = 0
    tab.Size = UDim2.new(0, 174, 0, 40)
    tab.ZIndex = 2
    tab.AutoButtonColor = false
    tab.Font = Enum.Font.SourceSans
    tab.Text = ""
    tab.TextColor3 = Color3.fromRGB(0, 0, 0) -- Base text color
    tab.TextSize = 14.000
    tab.Parent = tabs

    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 5)
    tabCorner.Parent = tab

    -- Left Accent for selected tab
    local LeftAccent = Instance.new("Frame")
    LeftAccent.Name = "LeftAccent"
    LeftAccent.Parent = tab
    LeftAccent.BackgroundColor3 = RED_ACCENT_COLOR
    LeftAccent.Size = UDim2.new(0, 3, 1, 0)
    LeftAccent.Position = UDim2.new(0, 0, 0, 0)
    LeftAccent.ZIndex = 3
    LeftAccent.Visible = false

    -- Icon
    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.Parent = tab
    Icon.BackgroundTransparency = 1.000
    Icon.Size = UDim2.new(0, 15, 0, 15)
    Icon.Position = UDim2.new(0.08, 0, 0.5, 0) -- Positioned to the left of text
    Icon.AnchorPoint = Vector2.new(0, 0.5)
    Icon.Image = icon_id or "rbxassetid://134992015790041" -- Default icon if not provided
    Icon.ImageColor3 = INACTIVE_GREY_TEXT_COLOR -- Default inactive color
    Icon.ZIndex = 3

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Parent = tab
    TextLabel.AnchorPoint = Vector2.new(0, 0.5) -- Aligned left
    TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.BackgroundTransparency = 1.000
    TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0.2, 0, 0.5, 0) -- Adjusted position to accommodate icon
    TextLabel.Size = UDim2.new(0.7, 0, 0, 15) -- Size for fading text
    TextLabel.ZIndex = 3
    TextLabel.FontFace = Font.new(
      "rbxasset://fonts/families/Montserrat.json",
      Enum.FontWeight.SemiBold
    )
    TextLabel.Text = tab_name
    TextLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Default inactive text color
    TextLabel.TextScaled = false -- Disable text scaling for consistent size
    TextLabel.TextSize = 14.000 -- Explicit text size
    TextLabel.TextTransparency = 0
    TextLabel.TextWrapped = true
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Initial gradient for inactive tabs
    local TextGradient = Instance.new("UIGradient")
    TextGradient.Transparency = NumberSequence.new({
      NumberSequenceKeypoint.new(0, 0),
      NumberSequenceKeypoint.new(0.7, 0),
      NumberSequenceKeypoint.new(1, 1),
    })
    TextGradient.Parent = TextLabel

    local left_section = Instance.new("ScrollingFrame")
    left_section.Name = "LeftSection"
    left_section.Active = true
    left_section.BackgroundColor3 = BACKGROUND_DARK_COLOR
    left_section.BackgroundTransparency = 0.8
    left_section.BorderColor3 = Color3.fromRGB(0, 0, 0)
    left_section.BorderSizePixel = 0
    -- Position and Size managed by open_tab
    left_section.Position = UDim2.new(0, 0, 0, 0)
    left_section.Size = UDim2.new(0.33, 0, 1, 0)
    left_section.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Enable vertical scrolling
    left_section.ScrollBarImageColor3 = RED_ACCENT_COLOR
    left_section.ScrollBarThickness = 3
    left_section.ClipsDescendants = true -- Important for corners to work

    local leftsectionCorner = Instance.new("UICorner")
    leftsectionCorner.CornerRadius = UDim.new(0, 8) -- Match container corner
    leftsectionCorner.Parent = left_section

    local leftsectionlist = Instance.new("UIListLayout")
    leftsectionlist.Parent = left_section
    leftsectionlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
    leftsectionlist.SortOrder = Enum.SortOrder.LayoutOrder
    leftsectionlist.Padding = UDim.new(0, 15) -- Increased padding between feature boxes
    local leftSectionPadding = Instance.new("UIPadding")
    leftSectionPadding.Parent = left_section
    leftSectionPadding.PaddingTop = UDim.new(0, 15)
    leftSectionPadding.PaddingBottom = UDim.new(0, 15)
    leftSectionPadding.PaddingLeft = UDim.new(0, 15)
    leftSectionPadding.PaddingRight = UDim.new(0, 15)

    local right_section = Instance.new("ScrollingFrame")
    right_section.Name = "RightSection"
    right_section.Active = true
    right_section.BackgroundColor3 = BACKGROUND_DARK_COLOR
    right_section.BackgroundTransparency = 0.8
    right_section.BorderColor3 = Color3.fromRGB(0, 0, 0)
    right_section.BorderSizePixel = 0
    -- Position and Size managed by open_tab
    right_section.Position = UDim2.new(0, 0, 0, 0)
    right_section.Size = UDim2.new(0.33, 0, 1, 0)
    right_section.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Enable vertical scrolling
    right_section.ScrollBarImageColor3 = RED_ACCENT_COLOR
    right_section.ScrollBarThickness = 3
    right_section.ClipsDescendants = true -- Important for corners to work

    local rightsectionCorner = Instance.new("UICorner")
    rightsectionCorner.CornerRadius = UDim.new(0, 8) -- Match container corner
    rightsectionCorner.Parent = right_section

    local rightsectionlist = Instance.new("UIListLayout")
    rightsectionlist.Parent = right_section

    rightsectionlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
    rightsectionlist.SortOrder = Enum.SortOrder.LayoutOrder
    rightsectionlist.Padding = UDim.new(0, 15) -- Increased padding between feature boxes
    local rightSectionPadding = Instance.new("UIPadding")
    rightSectionPadding.Parent = right_section
    rightSectionPadding.PaddingTop = UDim.new(0, 15)
    rightSectionPadding.PaddingBottom = UDim.new(0, 15)
    rightSectionPadding.PaddingLeft = UDim.new(0, 15)
    rightSectionPadding.PaddingRight = UDim.new(0, 15)

    if Container:FindFirstChild("RightSection") then
      left_section.Visible = false
      right_section.Visible = false
    else
      Tab.open_tab({
        tab = tab,
        left_section = left_section,
        right_section = right_section,
      })
      -- Ensure initially active tab has correct visual state
      tab.LeftAccent.Visible = true
      tab.TextLabel.TextColor3 = SUBTLE_RED_TEXT_COLOR
      tab.Icon.ImageColor3 = SUBTLE_RED_TEXT_COLOR
      if tab.TextLabel:FindFirstChildOfClass("UIGradient") then
        tab.TextLabel:FindFirstChildOfClass("UIGradient"):Destroy()
      end
    end

    left_section.Parent = Container
    right_section.Parent = Container

    tab.MouseButton1Click:Connect(function()
      Tab.open_tab({
        tab = tab,
        left_section = left_section,
        right_section = right_section,
      })
    end)

    local Module = {}

    -- New function to create a complete feature box
    function Module:create_feature(name, description, section_type, keybind_default_text, keybind_flag, toggle_initial_state, toggle_flag, keybind_callback, toggle_callback)
      local section = section_type == "left" and left_section or right_section

      local feature_box = Instance.new("Frame")
      feature_box.Name = name:gsub(" ", "") .. "Feature" -- Unique name
      feature_box.Parent = section
      feature_box.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      feature_box.BorderColor3 = RED_ACCENT_COLOR
      feature_box.BorderSizePixel = 1
      feature_box.Size = UDim2.new(0, 215, 0, 95) -- Adjusted size to fit content
      local feature_corner = Instance.new("UICorner")
      feature_corner.CornerRadius = UDim.new(0, 5)
      feature_corner.Parent = feature_box

      -- Feature Title (e.g., "Auto Parry")
      local title_label = Instance.new("TextLabel")
      title_label.Name = "Title"
      title_label.Parent = feature_box
      title_label.AnchorPoint = Vector2.new(0, 0.5)
      title_label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      title_label.BackgroundTransparency = 1.000
      title_label.BorderColor3 = Color3.fromRGB(0, 0, 0)
      title_label.BorderSizePixel = 0
      title_label.Position = UDim2.new(0.06, 0, 0.22, 0) -- Adjusted position
      title_label.Size = UDim2.new(0.8, 0, 0, 15)
      title_label.ZIndex = 2
      title_label.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      title_label.TextColor3 = RED_ACCENT_COLOR
      title_label.TextScaled = false
      title_label.TextSize = 14.000
      title_label.TextWrapped = true
      title_label.TextXAlignment = Enum.TextXAlignment.Left
      title_label.Text = name

      -- Feature Description (e.g., "Auto Parry the ball")
      local description_label = Instance.new("TextLabel")
      description_label.Name = "Description"
      description_label.Parent = feature_box
      description_label.AnchorPoint = Vector2.new(0, 0.5)
      description_label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      description_label.BackgroundTransparency = 1.000
      description_label.BorderColor3 = Color3.fromRGB(0, 0, 0)
      description_label.BorderSizePixel = 0
      description_label.Position = UDim2.new(0.06, 0, 0.45, 0) -- Adjusted position
      description_label.Size = UDim2.new(0.8, 0, 0, 12)
      description_label.ZIndex = 2
      description_label.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      description_label.TextColor3 = INACTIVE_GREY_TEXT_COLOR
      description_label.TextScaled = false
      description_label.TextSize = 10.000 -- Smaller font size for description
      description_label.TextWrapped = true
      description_label.TextXAlignment = Enum.TextXAlignment.Left
      description_label.Text = description

      -- Keybind/Toggle Sub-Frame (the "None" box with toggle)
      local keybind_toggle_frame = Instance.new("Frame")
      keybind_toggle_frame.Name = "KeybindToggleFrame"
      keybind_toggle_frame.Parent = feature_box
      keybind_toggle_frame.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR
      keybind_toggle_frame.BorderColor3 = RED_ACCENT_COLOR
      keybind_toggle_frame.BorderSizePixel = 1
      keybind_toggle_frame.Position = UDim2.new(0.06, 0, 0.65, 0) -- Position below description
      keybind_toggle_frame.Size = UDim2.new(0.88, 0, 0, 25) -- Adjusted size
      local keybind_toggle_corner = Instance.new("UICorner")
      keybind_toggle_corner.CornerRadius = UDim.new(0, 3)
      keybind_toggle_corner.Parent = keybind_toggle_frame

      -- Icons within keybind_toggle_frame
      local icon1 = Instance.new("ImageLabel")
      icon1.Name = "Icon1"
      icon1.Parent = keybind_toggle_frame
      icon1.BackgroundTransparency = 1
      icon1.Size = UDim2.new(0, 16, 0, 16)
      icon1.Position = UDim2.new(0.05, 0, 0.5, 0)
      icon1.AnchorPoint = Vector2.new(0, 0.5)
      icon1.Image = "rbxassetid://6034177579" -- Placeholder: people icon
      icon1.ImageColor3 = INACTIVE_GREY_TEXT_COLOR -- Grey as per image

      local icon2 = Instance.new("ImageLabel")
      icon2.Name = "Icon2"
      icon2.Parent = keybind_toggle_frame
      icon2.BackgroundTransparency = 1
      icon2.Size = UDim2.new(0, 14, 0, 14)
      icon2.Position = UDim2.new(0.18, 0, 0.5, 0)
      icon2.AnchorPoint = Vector2.new(0, 0.5)
      icon2.Image = "rbxassetid://15865230919" -- Placeholder: up/down arrows icon
      icon2.ImageColor3 = INACTIVE_GREY_TEXT_COLOR -- Grey as per image

      -- Keybind Text Label (e.g., "None")
      local keybind_label = Instance.new("TextLabel")
      keybind_label.Name = "KeybindLabel"
      keybind_label.Parent = keybind_toggle_frame
      keybind_label.BackgroundTransparency = 1
      keybind_label.Size = UDim2.new(0.3, 0, 1, 0)
      keybind_label.Position = UDim2.new(0.28, 0, 0, 0)
      keybind_label.AnchorPoint = Vector2.new(0, 0)
      keybind_label.TextXAlignment = Enum.TextXAlignment.Left
      keybind_label.TextYAlignment = Enum.TextYAlignment.Center
      keybind_label.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      keybind_label.TextSize = 12
      keybind_label.TextColor3 = INACTIVE_GREY_TEXT_COLOR

      -- Initial Keybind State
      if not Library.Flags[keybind_flag] then
        Library.Flags[keybind_flag] = keybind_default_text
      end
      keybind_label.Text = Library.Flags[keybind_flag]

      keybind_toggle_frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
          -- Only allow keybind change if not interacting with toggle switch
          if not input.Target:IsDescendantOf(toggle_switch) then
            keybind_label.Text = "..."
            local a, b = UserInputService.InputBegan:Wait()
            if a.KeyCode.Name ~= "Unknown" then
              keybind_label.Text = a.KeyCode.Name
              Library.Flags[keybind_flag] = a.KeyCode.Name
              Library.save_flags()
            end
            if keybind_callback then
              keybind_callback(Library.Flags[keybind_flag])
            end
          end
        end
      end)

      UserInputService.InputBegan:Connect(function(current, pressed)
        if not pressed then
          if current.KeyCode.Name == Library.Flags[keybind_flag] then
            if keybind_callback then
              keybind_callback(Library.Flags[keybind_flag])
            end
          end
        end
      end)

      -- Custom Toggle Switch (Slider-like)
      local toggle_switch = Instance.new("Frame")
      toggle_switch.Name = "ToggleSwitch"
      toggle_switch.Parent = keybind_toggle_frame
      toggle_switch.AnchorPoint = Vector2.new(1, 0.5)
      toggle_switch.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR -- Default off color for track
      toggle_switch.BorderColor3 = RED_ACCENT_COLOR
      toggle_switch.BorderSizePixel = 1
      toggle_switch.Position = UDim2.new(0.96, 0, 0.5, 0)
      toggle_switch.Size = UDim2.new(0, 28, 0, 16) -- Track size
      local toggle_corner = Instance.new("UICorner")
      toggle_corner.CornerRadius = UDim.new(0, 8) -- Half of height for rounded caps
      toggle_corner.Parent = toggle_switch

      local toggle_knob = Instance.new("Frame") -- Use Frame for knob instead of ImageLabel if no image provided
      toggle_knob.Name = "Knob"
      toggle_knob.Parent = toggle_switch
      toggle_knob.AnchorPoint = Vector2.new(0.5, 0.5)
      toggle_knob.BackgroundColor3 = INACTIVE_GREY_TEXT_COLOR -- Default off color for knob
      toggle_knob.BorderColor3 = RED_ACCENT_COLOR
      toggle_knob.BorderSizePixel = 1
      toggle_knob.Size = UDim2.new(0, 12, 0, 12)
      local knob_corner = Instance.new("UICorner")
      knob_corner.CornerRadius = UDim.new(0, 6) -- Half of size for circle
      knob_corner.Parent = toggle_knob

      local knob_on_position = UDim2.new(0.75, 0, 0.5, 0)
      local knob_off_position = UDim2.new(0.25, 0, 0.5, 0)

      -- Initial Toggle State
      if not Library.Flags[toggle_flag] then
        Library.Flags[toggle_flag] = toggle_initial_state
      end

      local function set_toggle_state_visual(state)
        local target_pos = state and knob_on_position or knob_off_position
        local target_knob_color = state and RED_ACCENT_COLOR or INACTIVE_GREY_TEXT_COLOR
        local target_track_color = state and RED_ACCENT_COLOR or INNER_ELEMENT_BACKGROUND_COLOR

        TweenService:Create(
          toggle_knob,
          TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
          {
            Position = target_pos,
            BackgroundColor3 = target_knob_color,
          }
        ):Play()
        TweenService:Create(
          toggle_switch,
          TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
          {
            BackgroundColor3 = target_track_color,
          }
        ):Play()
      end

      -- Apply initial visual state
      set_toggle_state_visual(Library.Flags[toggle_flag])
      if toggle_callback then
        toggle_callback(Library.Flags[toggle_flag])
      end

      toggle_switch.MouseButton1Click:Connect(function()
        Library.Flags[toggle_flag] = not Library.Flags[toggle_flag]
        Library.save_flags()
        set_toggle_state_visual(Library.Flags[toggle_flag])
        if toggle_callback then
          toggle_callback(Library.Flags[toggle_flag])
        end
      end)
    end

    function Module:create_title()
      -- This function is no longer used for feature titles, as create_feature handles it
      -- It might be repurposed for section titles within scrolling frames if needed.
      -- Keeping for compatibility, but note it won't produce the image's "Auto Parry" title appearance in isolation.
      local section = self.section == "left" and left_section or right_section

      local title = Instance.new("TextLabel")
      title.Name = "Title"
      title.AnchorPoint = Vector2.new(0, 0.5)
      title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      title.BackgroundTransparency = 1.000
      title.BorderColor3 = Color3.fromRGB(0, 0, 0)
      title.BorderSizePixel = 0
      title.Position = UDim2.new(0.04, 0, 0.0, 0) -- First item in list layout
      title.Size = UDim2.new(0, 201, 0, 15)
      title.ZIndex = 2
      title.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      title.TextColor3 = RED_ACCENT_COLOR -- Red title
      title.TextScaled = false -- Disable text scaling
      title.TextSize = 14.000 -- Explicit text size
      title.TextWrapped = true
      title.TextXAlignment = Enum.TextXAlignment.Left
      title.Parent = section
      title.Text = self.name
    end

    function Module:enable_toggle()
      -- This logic is now part of the new custom toggle switch's visuals in create_feature
      -- Keeping for compatibility if old toggle logic is still needed elsewhere.
      TweenService:Create(self.Checkbox.Checkmark, TweenInfo.new(0.4), {
        ImageTransparency = 0,
      }):Play()
    end

    function Module:disable_toggle()
      -- This logic is now part of the new custom toggle switch's visuals in create_feature
      -- Keeping for compatibility if old toggle logic is still needed elsewhere.
      TweenService:Create(self.Checkbox.Checkmark, TweenInfo.new(0.4), {
        ImageTransparency = 1,
      }):Play()
    end

    function Module:update_toggle()
      -- This logic is now part of the new custom toggle switch's visuals in create_feature
      -- Keeping for compatibility if old toggle logic is still needed elsewhere.
      if self.state then
        Module.enable_toggle(self.toggle)
      else
        Module.disable_toggle(self.toggle)
      end
    end

    -- Re-purposing old create_toggle to use the new create_feature structure
    function Module:create_toggle(name, flag, enabled, callback)
      -- This now creates a full feature box with a toggle
      Module.create_feature(
        name,
        "", -- No specific description for a simple toggle
        self.section,
        "None", -- Default keybind text
        flag .. "Keybind", -- Separate flag for keybind
        enabled, -- Initial toggle state
        flag, -- Toggle state flag
        function(key)
          print(`{name} Keybind: {key}`)
        end,
        callback
      )
    end

    -- Re-purposing old create_description_toggle to use the new create_feature structure
    function Module:create_description_toggle(name, description, flag, enabled, callback)
      -- This now creates a full feature box with a toggle and description
      Module.create_feature(
        name,
        description,
        self.section,
        "None", -- Default keybind text
        flag .. "Keybind", -- Separate flag for keybind
        enabled, -- Initial toggle state
        flag, -- Toggle state flag
        function(key)
          print(`{name} Keybind: {key}`)
        end,
        callback
      )
    end

    function Module:create_paragraph()
      local section = self.section == "left" and left_section or right_section

      local Paragraph = Instance.new("Frame")
      Paragraph.Name = "Paragraph"
      Paragraph.Parent = section
      Paragraph.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      Paragraph.BorderColor3 = RED_ACCENT_COLOR
      Paragraph.BorderSizePixel = 1
      Paragraph.Size = UDim2.new(0, 215, 0, 45)
      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = Paragraph

      local TextLabel = Instance.new("TextLabel")
      TextLabel.Parent = Paragraph
      TextLabel.AnchorPoint = Vector2.new(0, 0.5)
      TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      TextLabel.BackgroundTransparency = 1.000
      TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      TextLabel.BorderSizePixel = 0
      TextLabel.Position = UDim2.new(0.04, 0, 0.35, 0)
      TextLabel.Size = UDim2.new(0, 164, 0, 15)
      TextLabel.ZIndex = 2
      TextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      TextLabel.TextColor3 = RED_ACCENT_COLOR -- Red title text
      TextLabel.TextScaled = false -- Disable text scaling
      TextLabel.TextSize = 14.000 -- Explicit text size
      TextLabel.TextWrapped = true
      TextLabel.TextXAlignment = Enum.TextXAlignment.Left
      TextLabel.Text = self.name

      local DescriptionTextLabel = Instance.new("TextLabel")
      DescriptionTextLabel.Parent = Paragraph
      DescriptionTextLabel.AnchorPoint = Vector2.new(0, 0.5)
      DescriptionTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      DescriptionTextLabel.BackgroundTransparency = 1.000
      DescriptionTextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      DescriptionTextLabel.BorderSizePixel = 0
      DescriptionTextLabel.Position = UDim2.new(0.04, 0, 0.65, 0)
      DescriptionTextLabel.Size = UDim2.new(0, 164, 0, 10)
      DescriptionTextLabel.ZIndex = 2
      DescriptionTextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      DescriptionTextLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray text
      DescriptionTextLabel.TextScaled = false -- Disable text scaling
      DescriptionTextLabel.TextSize = 12.000 -- Explicit smaller size
      DescriptionTextLabel.TextWrapped = true
      DescriptionTextLabel.TextXAlignment = Enum.TextXAlignment.Left
      DescriptionTextLabel.Text = self.title
    end
    function Module:create_verified()
      local section = self.section == "left" and left_section or right_section

      local Verified = Instance.new("Frame")
      Verified.Name = "Verified"
      Verified.Parent = section
      Verified.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      Verified.BorderColor3 = RED_ACCENT_COLOR
      Verified.BorderSizePixel = 1
      Verified.Size = UDim2.new(0, 215, 0, 45)
      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = Verified

      local TextLabel = Instance.new("TextLabel")
      TextLabel.Parent = Verified
      TextLabel.AnchorPoint = Vector2.new(0, 0.5)
      TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      TextLabel.BackgroundTransparency = 1.000
      TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      TextLabel.BorderSizePixel = 0
      TextLabel.Position = UDim2.new(0.04, 0, 0.35, 0)
      TextLabel.Size = UDim2.new(0, 164, 0, 15)
      TextLabel.ZIndex = 2
      TextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      TextLabel.TextColor3 = RED_ACCENT_COLOR -- Red text
      TextLabel.TextScaled = false -- Disable text scaling
      TextLabel.TextSize = 14.000 -- Explicit text size
      TextLabel.TextWrapped = true
      TextLabel.TextXAlignment = Enum.TextXAlignment.Left
      TextLabel.Text = "Verified"

      local Badge = Instance.new("ImageLabel")
      Badge.Name = "Badge"
      Badge.Parent = TextLabel -- Parented to TextLabel for inline positioning
      Badge.AnchorPoint = Vector2.new(0, 0.5)
      Badge.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Badge.BackgroundTransparency = 1.000
      Badge.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Badge.BorderSizePixel = 0
      Badge.Position = UDim2.new(0.2, 0, 0, 0) -- Relative to parent TextLabel
      Badge.Size = UDim2.new(0, 14, 0, 14)
      Badge.ZIndex = 1
      Badge.Image = "rbxassetid://70492506173823"
      Badge.ImageColor3 = RED_ACCENT_COLOR

      local DescriptionTextLabel = Instance.new("TextLabel")
      DescriptionTextLabel.Parent = Verified
      DescriptionTextLabel.AnchorPoint = Vector2.new(0, 0.5)
      DescriptionTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      DescriptionTextLabel.BackgroundTransparency = 1.000
      DescriptionTextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      DescriptionTextLabel.BorderSizePixel = 0
      DescriptionTextLabel.Position = UDim2.new(0.04, 0, 0.65, 0)
      DescriptionTextLabel.Size = UDim2.new(0, 164, 0, 10)
      DescriptionTextLabel.ZIndex = 2
      DescriptionTextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      DescriptionTextLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray text
      DescriptionTextLabel.TextScaled = false -- Disable text scaling
      DescriptionTextLabel.TextSize = 12.000 -- Explicit smaller size
      DescriptionTextLabel.TextWrapped = true
      DescriptionTextLabel.TextXAlignment = Enum.TextXAlignment.Left
      DescriptionTextLabel.Text = self.title
    end
    function Module:create_line()
      local section = self.section == "left" and left_section or right_section

      local Space = Instance.new("Frame")
      Space.Name = "Space"
      Space.Parent = section
      Space.BackgroundColor3 = RED_ACCENT_COLOR
      Space.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Space.BorderSizePixel = 0
      Space.Position = UDim2.new(0.04, 0, 0.0, 0) -- First item in list layout, with padding
      Space.Size = UDim2.new(0, 200, 0, 3)
    end
    function Module:create_button()
      local section = self.section == "left" and left_section or right_section

      local button = Instance.new("TextButton")
      button.Name = "Button"
      button.Parent = section
      button.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      button.BorderColor3 = RED_ACCENT_COLOR
      button.BorderSizePixel = 1
      button.Size = UDim2.new(0, 215, 0, 37)
      button.AutoButtonColor = false
      button.Font = Enum.Font.SourceSans
      button.Text = ""
      button.TextColor3 = Color3.fromRGB(0, 0, 0)
      button.TextSize = 14.000
      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = button

      local Buttonmark = Instance.new("ImageLabel")
      Buttonmark.Name = "Buttonmark"
      Buttonmark.Parent = button
      Buttonmark.AnchorPoint = Vector2.new(0.5, 0.5)
      Buttonmark.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Buttonmark.BackgroundTransparency = 1.000
      Buttonmark.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Buttonmark.BorderSizePixel = 0
      Buttonmark.Position = UDim2.new(0.915, 0, 0.5, 0)
      Buttonmark.Size = UDim2.new(0, 18, 0, 18)
      Buttonmark.ZIndex = 2
      Buttonmark.Image = "rbxassetid://3944703587"
      Buttonmark.ImageColor3 = RED_ACCENT_COLOR

      local TextLabel = Instance.new("TextLabel")
      TextLabel.Parent = button
      TextLabel.AnchorPoint = Vector2.new(0, 0.5)
      TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      TextLabel.BackgroundTransparency = 1.000
      TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      TextLabel.BorderSizePixel = 0
      TextLabel.Position = UDim2.new(0.04, 0, 0.5, 0)
      TextLabel.Size = UDim2.new(0, 164, 0, 15)
      TextLabel.ZIndex = 2
      TextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      TextLabel.TextColor3 = RED_ACCENT_COLOR -- Red text
      TextLabel.TextScaled = false -- Disable text scaling
      TextLabel.TextSize = 14.000 -- Explicit text size
      TextLabel.TextWrapped = true
      TextLabel.TextXAlignment = Enum.TextXAlignment.Left
      TextLabel.Text = self.name

      button.MouseButton1Click:Connect(function()
        self.callback()
      end)
    end
    function Module:create_description_button()
      local section = self.section == "left" and left_section or right_section

      local button = Instance.new("TextButton")
      button.Name = "Description Button"
      button.Parent = section
      button.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      button.BorderColor3 = RED_ACCENT_COLOR
      button.BorderSizePixel = 1
      button.Size = UDim2.new(0, 215, 0, 45)
      button.AutoButtonColor = false
      button.Font = Enum.Font.SourceSans
      button.Text = ""
      button.TextColor3 = Color3.fromRGB(0, 0, 0)
      button.TextSize = 14.000
      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = button

      local Buttonmark = Instance.new("ImageLabel")
      Buttonmark.Name = "Buttonmark"
      Buttonmark.Parent = button
      Buttonmark.AnchorPoint = Vector2.new(0.5, 0.5)
      Buttonmark.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Buttonmark.BackgroundTransparency = 1.000
      Buttonmark.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Buttonmark.BorderSizePixel = 0
      Buttonmark.Position = UDim2.new(0.915, 0, 0.5, 0)
      Buttonmark.Size = UDim2.new(0, 18, 0, 18)
      Buttonmark.ZIndex = 2
      Buttonmark.Image = "rbxassetid://3944703587"
      Buttonmark.ImageColor3 = RED_ACCENT_COLOR

      local TextLabel = Instance.new("TextLabel")
      TextLabel.Parent = button
      TextLabel.AnchorPoint = Vector2.new(0, 0.5)
      TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      TextLabel.BackgroundTransparency = 1.000
      TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      TextLabel.BorderSizePixel = 0
      TextLabel.Position = UDim2.new(0.04, 0, 0.35, 0)
      TextLabel.Size = UDim2.new(0, 164, 0, 15)
      TextLabel.ZIndex = 2
      TextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      TextLabel.TextColor3 = RED_ACCENT_COLOR -- Red title text
      TextLabel.TextScaled = false -- Disable text scaling
      TextLabel.TextSize = 14.000 -- Explicit text size
      TextLabel.TextWrapped = true
      TextLabel.TextXAlignment = Enum.TextXAlignment.Left
      TextLabel.Text = self.name

      local DescriptionTextLabel = Instance.new("TextLabel")
      DescriptionTextLabel.Parent = button
      DescriptionTextLabel.AnchorPoint = Vector2.new(0, 0.5)
      DescriptionTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      DescriptionTextLabel.BackgroundTransparency = 1.000
      DescriptionTextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      DescriptionTextLabel.BorderSizePixel = 0
      DescriptionTextLabel.Position = UDim2.new(0.04, 0, 0.65, 0)
      DescriptionTextLabel.Size = UDim2.new(0, 164, 0, 10)
      DescriptionTextLabel.ZIndex = 2
      DescriptionTextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      DescriptionTextLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray text
      DescriptionTextLabel.TextScaled = false -- Disable text scaling
      DescriptionTextLabel.TextSize = 12.000 -- Explicit smaller size
      DescriptionTextLabel.TextWrapped = true
      DescriptionTextLabel.TextXAlignment = Enum.TextXAlignment.Left
      DescriptionTextLabel.Text = self.description

      button.MouseButton1Click:Connect(function()
        self.callback()
      end)
    end
    function Module:update_slider()
      local result =
        math.clamp((Mouse.X - self.slider.Box.AbsolutePosition.X) / self.slider.Box.AbsoluteSize.X, 0, 1)

      if not result then
        return
      end

      local number = math.floor(
        (((self.maximum_value - self.minimum_value) * result) + self.minimum_value) * 10
      ) / 10
      local slider_size = math.clamp(result, 0.001, 0.999)

      self.slider.Box.Fill.Size = UDim2.new(slider_size, 0, 1, 0) -- Scale fill frame
      self.slider.Box.Fill.BackgroundColor3 = RED_ACCENT_COLOR -- Make fill color solid red

      self.slider.Box.Glow.UIGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(slider_size, 0),
        NumberSequenceKeypoint.new(math.min(slider_size + 0.03, 1), 1),
        NumberSequenceKeypoint.new(1, 1),
      })
      self.slider.Box.Glow.ImageColor3 = RED_ACCENT_COLOR -- Ensure glow is red

      Library.Flags[self.flag] = number

      self.slider.Number.Text = number
      self.callback(number)
    end

    function Module:slider_loop()
      Library.slider_drag = true

      while Library.slider_drag do
        Module.update_slider(self)

        task.wait()
      end
    end

    function Module:create_slider()
      local drag = false
      local section = self.section == "left" and left_section or right_section

      -- TextLabel for the slider name
      local nameLabel = Instance.new("TextLabel")
      nameLabel.Name = "SliderName"
      nameLabel.Parent = section
      nameLabel.AnchorPoint = Vector2.new(0, 0.5)
      nameLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      nameLabel.BackgroundTransparency = 1.000
      nameLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      nameLabel.BorderSizePixel = 0
      nameLabel.Position = UDim2.new(0.04, 0, 0.0, 0) -- First item in list layout
      nameLabel.Size = UDim2.new(0, 151, 0, 15)
      nameLabel.ZIndex = 2
      nameLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      nameLabel.TextColor3 = RED_ACCENT_COLOR -- Red text
      nameLabel.TextScaled = false -- Disable text scaling
      nameLabel.TextSize = 14.000 -- Explicit text size
      nameLabel.TextWrapped = true
      nameLabel.TextXAlignment = Enum.TextXAlignment.Left
      nameLabel.Text = self.name

      local slider = Instance.new("Frame") -- Use Frame for main container
      slider.Name = "Slider"
      slider.Parent = section
      slider.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      slider.BorderColor3 = RED_ACCENT_COLOR
      slider.BorderSizePixel = 1
      slider.Size = UDim2.new(0, 215, 0, 37) -- Height adjusted

      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = slider

      local Box = Instance.new("Frame")
      Box.Name = "Box"
      Box.Parent = slider
      Box.AnchorPoint = Vector2.new(0.5, 0.5)
      Box.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR
      Box.BorderColor3 = RED_ACCENT_COLOR
      Box.BorderSizePixel = 1
      Box.Position = UDim2.new(0.5, 0, 0.5, 0)
      Box.Size = UDim2.new(0, 192, 0, 6) -- Track size

      local UICorner_2 = Instance.new("UICorner")
      UICorner_2.CornerRadius = UDim.new(0, 3)
      UICorner_2.Parent = Box

      local Glow = Instance.new("ImageLabel")
      Glow.Name = "Glow"
      Glow.Parent = Box
      Glow.AnchorPoint = Vector2.new(0.5, 0.5)
      Glow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Glow.BackgroundTransparency = 1.000
      Glow.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Glow.BorderSizePixel = 0
      Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
      Glow.Size = UDim2.new(0, 204, 0, 17)
      Glow.ZIndex = 2
      Glow.Image = "rbxassetid://17381990533"
      Glow.ImageColor3 = RED_ACCENT_COLOR

      local UIGradient = Instance.new("UIGradient")
      UIGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0.00, 0.00),
        NumberSequenceKeypoint.new(0.50, 0.00),
        NumberSequenceKeypoint.new(0.53, 1.00),
        NumberSequenceKeypoint.new(1.00, 1.00),
      })
      UIGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0.00, RED_ACCENT_COLOR),
        ColorSequenceKeypoint.new(1.00, RED_ACCENT_COLOR:Lerp(Color3.new(0, 0, 0), 0.3)),
      })
      UIGradient.Parent = Glow

      local Fill = Instance.new("Frame") -- Represents the filled part of the slider
      Fill.Name = "Fill"
      Fill.Parent = Box
      Fill.AnchorPoint = Vector2.new(0, 0.5)
      Fill.BackgroundColor3 = RED_ACCENT_COLOR -- Solid red fill
      Fill.BackgroundTransparency = 0.000
      Fill.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Fill.BorderSizePixel = 0
      Fill.Position = UDim2.new(0, 0, 0.5, 0)
      Fill.Size = UDim2.new(0, 0, 0, 6) -- Initial size 0
      Fill.ZIndex = 1

      local UICorner_3 = Instance.new("UICorner")
      UICorner_3.CornerRadius = UDim.new(0, 3)
      UICorner_3.Parent = Fill

      local Hitbox = Instance.new("TextButton") -- For click detection on track
      Hitbox.Name = "Hitbox"
      Hitbox.Parent = Box
      Hitbox.AnchorPoint = Vector2.new(0.5, 0.5)
      Hitbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Hitbox.BackgroundTransparency = 1.000
      Hitbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Hitbox.BorderSizePixel = 0
      Hitbox.Position = UDim2.new(0.5, 0, 0.5, 0)
      Hitbox.Size = UDim2.new(0, 200, 0, 13)
      Hitbox.ZIndex = 3
      Hitbox.AutoButtonColor = false
      Hitbox.Font = Enum.Font.SourceSans
      Hitbox.Text = ""
      Hitbox.TextColor3 = Color3.fromRGB(0, 0, 0)
      Hitbox.TextSize = 14.000

      local Number = Instance.new("TextLabel") -- For displaying value
      Number.Name = "Number"
      Number.Parent = slider
      Number.AnchorPoint = Vector2.new(1, 0.5) -- Right-aligned
      Number.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Number.BackgroundTransparency = 1.000
      Number.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Number.BorderSizePixel = 0
      Number.Position = UDim2.new(0.96, 0, 0.5, 0) -- Positioned on the right of slider
      Number.Size = UDim2.new(0, 38, 0, 15)
      Number.ZIndex = 2
      Number.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      Number.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Use gray for numbers as per Buwu screenshot
      Number.TextScaled = false -- Disable text scaling
      Number.TextSize = 14.000 -- Explicit text size
      Number.TextWrapped = true
      Number.TextXAlignment = Enum.TextXAlignment.Right

      Number.Text = self.value

      if not Library.Flags[self.flag] then
        Library.Flags[self.flag] = self.value
      end

      slider.Number.Text = Library.Flags[self.flag]
      -- Set initial fill state
      local initial_result = math.clamp(
        (Library.Flags[self.flag] - self.minimum_value) / (self.maximum_value - self.minimum_value),
        0,
        1
      )
      Fill.Size = UDim2.new(initial_result, 0, 1, 0)
      -- Initial glow transparency
      Glow.UIGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(initial_result, 0),
        NumberSequenceKeypoint.new(math.min(initial_result + 0.03, 1), 1),
        NumberSequenceKeypoint.new(1, 1),
      })

      self.callback(Library.Flags[self.flag])

      Hitbox.MouseButton1Down:Connect(function()
        if Library.slider_drag then
          return
        end

        Module.slider_loop({
          slider = slider,
          flag = self.flag,
          callback = self.callback,
          maximum_value = self.maximum_value,
          minimum_value = self.minimum_value,
        })
      end)

      UserInputService.InputEnded:Connect(function(input: InputObject, process: boolean)
        if
          input.UserInputType == Enum.UserInputType.MouseButton1 or
          input.UserInputType == Enum.UserInputType.Touch
        then
          Library.slider_drag = false
          Library.save_flags()
        end
      end)
    end

    function Module:create_dropdown()
      local section = self.section == "left" and left_section or right_section
      local list_size = 6 -- Will be updated dynamically
      local open = false

      -- TextLabel for the dropdown name
      local nameLabel = Instance.new("TextLabel")
      nameLabel.Name = "DropdownName"
      nameLabel.Parent = section
      nameLabel.AnchorPoint = Vector2.new(0, 0.5)
      nameLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      nameLabel.BackgroundTransparency = 1.000
      nameLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      nameLabel.BorderSizePixel = 0
      nameLabel.Position = UDim2.new(0.04, 0, 0.0, 0) -- First item in list layout
      nameLabel.Size = UDim2.new(0, 151, 0, 15)
      nameLabel.ZIndex = 2
      nameLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      nameLabel.TextColor3 = RED_ACCENT_COLOR -- Red text
      nameLabel.TextScaled = false -- Disable text scaling
      nameLabel.TextSize = 14.000 -- Explicit text size
      nameLabel.TextWrapped = true
      nameLabel.TextXAlignment = Enum.TextXAlignment.Left
      nameLabel.Text = self.name

      local option = Instance.new("TextButton")
      option.Name = "Option"
      option.Active = false
      option.AnchorPoint = Vector2.new(0, 0.5) -- Aligned left
      option.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      option.BackgroundTransparency = 1.000
      option.BorderColor3 = Color3.fromRGB(0, 0, 0)
      option.BorderSizePixel = 0
      option.Position = UDim2.new(0.04, 0, 0.5, 0) -- Positioned within Options frame, with padding
      option.Selectable = false
      option.Size = UDim2.new(0.92, 0, 0, 13) -- Adjusted size
      option.ZIndex = 2
      option.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      option.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray for options list as per Buwu screenshot
      option.TextScaled = false -- Disable text scaling
      option.TextSize = 13.000 -- Explicit text size
      option.TextTransparency = 0 -- Default to opaque, not 0.5
      option.TextWrapped = true
      option.TextXAlignment = Enum.TextXAlignment.Left

      local dropdown = Instance.new("TextButton") -- Keep as TextButton for click detection
      dropdown.Parent = section
      dropdown.Name = "Dropdown"
      dropdown.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      dropdown.BorderColor3 = RED_ACCENT_COLOR
      dropdown.BorderSizePixel = 1
      dropdown.Size = UDim2.new(0, 215, 0, 36)
      dropdown.AutoButtonColor = false
      dropdown.Font = Enum.Font.SourceSans
      dropdown.Text = ""
      dropdown.TextColor3 = Color3.fromRGB(0, 0, 0)
      dropdown.TextSize = 14.000

      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = dropdown

      local Box = Instance.new("Frame")
      Box.Name = "Box"
      Box.Parent = dropdown
      Box.AnchorPoint = Vector2.new(0.5, 0)
      Box.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR
      Box.BorderColor3 = RED_ACCENT_COLOR
      Box.BorderSizePixel = 1
      Box.Position = UDim2.new(0.5, 0, 0, 0) -- Positioned at top of dropdown button
      Box.Size = UDim2.new(1, -2, 0, 25) -- Adjusted size
      Box.ZIndex = 2

      local UICorner_2 = Instance.new("UICorner")
      UICorner_2.CornerRadius = UDim.new(0, 3)
      UICorner_2.Parent = Box

      local Options = Instance.new("Frame")
      Options.Name = "Options"
      Options.Parent = Box
      Options.AnchorPoint = Vector2.new(0.5, 0)
      Options.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR
      Options.BorderColor3 = RED_ACCENT_COLOR
      Options.BorderSizePixel = 1
      Options.ClipsDescendants = true
      Options.Position = UDim2.new(0.5, 0, 1, 0) -- Drops down from the bottom of Box
      Options.Size = UDim2.new(1, 0, 0, 0) -- Starts closed
      Options.ZIndex = 1 -- Ensure it appears on top of main UI content
      Options.Visible = false -- Initially hidden

      local UICorner_3 = Instance.new("UICorner")
      UICorner_3.CornerRadius = UDim.new(0, 3)
      UICorner_3.Parent = Options

      local UIPadding_2 = Instance.new("UIPadding")
      UIPadding_2.Parent = Options
      UIPadding_2.PaddingLeft = UDim.new(0, 15)
      UIPadding_2.PaddingTop = UDim.new(0, 10)

      local UIListLayout_2 = Instance.new("UIListLayout")
      UIListLayout_2.Parent = Options
      UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
      UIListLayout_2.Padding = UDim.new(0, 10)

      local SelectedOptionLabel = Instance.new("TextLabel")
      SelectedOptionLabel.Parent = Box
      SelectedOptionLabel.Name = "SelectedOptionLabel"
      SelectedOptionLabel.AnchorPoint = Vector2.new(0, 0.5)
      SelectedOptionLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      SelectedOptionLabel.BackgroundTransparency = 1.000
      SelectedOptionLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      SelectedOptionLabel.BorderSizePixel = 0
      SelectedOptionLabel.Position = UDim2.new(0.04, 0, 0.5, 0)
      SelectedOptionLabel.Size = UDim2.new(0, 151, 0, 13)
      SelectedOptionLabel.ZIndex = 2
      SelectedOptionLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      SelectedOptionLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray text for selected option
      SelectedOptionLabel.TextScaled = false -- Disable text scaling
      SelectedOptionLabel.TextSize = 14.000 -- Explicit text size
      SelectedOptionLabel.TextWrapped = true
      SelectedOptionLabel.TextXAlignment = Enum.TextXAlignment.Left

      local Arrow = Instance.new("ImageLabel")
      Arrow.Name = "Arrow"
      Arrow.Parent = Box
      Arrow.Active = true
      Arrow.AnchorPoint = Vector2.new(0.5, 0.5)
      Arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      Arrow.BackgroundTransparency = 1.000
      Arrow.BorderColor3 = Color3.fromRGB(0, 0, 0)
      Arrow.BorderSizePixel = 0
      Arrow.Position = UDim2.new(0.920000017, 0, 0.5, 0)
      Arrow.Size = UDim2.new(0, 12, 0, 12)
      Arrow.ZIndex = 2
      Arrow.Image = "rbxassetid://17400678941"
      Arrow.ImageColor3 = RED_ACCENT_COLOR

      local Dropdown = {}

      function Dropdown:open()
        dropdown.Box.SelectedOptionLabel.Text = Library.Flags[self.flag]
        list_size = (#self.options * (option.Size.Y.Offset + UIListLayout_2.Padding.Offset)) + UIPadding_2.PaddingTop.Offset
        if list_size < 10 then
          list_size = 10
        end
        Options.Visible = true

        TweenService:Create(Options, TweenInfo.new(0.4), {
          Size = UDim2.new(1, 0, 0, list_size),
        }):Play()

        TweenService:Create(dropdown, TweenInfo.new(0.4), {
          Size = UDim2.new(0, 215, 0, Box.Size.Y.Offset + list_size),
        }):Play()

        TweenService:Create(Arrow, TweenInfo.new(0.4), {
          Rotation = 180,
        }):Play()
      end

      function Dropdown:close()
        dropdown.Box.SelectedOptionLabel.Text = Library.Flags[self.flag]
        TweenService:Create(Options, TweenInfo.new(0.4), {
          Size = UDim2.new(1, 0, 0, 0),
        }):Play()

        TweenService:Create(dropdown, TweenInfo.new(0.4), {
          Size = UDim2.new(0, 215, 0, 36),
        }):Play()

        TweenService:Create(Arrow, TweenInfo.new(0.4), {
          Rotation = 0,
        }):Play()
        Options.TweenCompleted:Once(function()
          Options.Visible = false
        end)
      end

      function Dropdown:clear()
        for _, object in Options:GetChildren() do
          if object.Name ~= "Option" then
            continue
          end
          object:Destroy()
        end
      end

      function Dropdown:select_option()
        -- Options list items have 0 text transparency when selected, 0.5 when not selected
        -- self.new_option.TextTransparency = 0 -- This is handled by TextColor3 for selected option.
        self.new_option.TextColor3 = RED_ACCENT_COLOR -- Selected option text color

        for _, object in Options:GetChildren() do
          if object.Name ~= "Option" then
            continue
          end

          if object == self.new_option then -- If this is the newly selected option
            object.TextColor3 = RED_ACCENT_COLOR -- Set to red
          else -- If it's another option
            object.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Set to grey
          end
        end

        dropdown.Box.SelectedOptionLabel.Text = self.new_option.Text
      end

      function Dropdown:update()
        Dropdown.clear()

        for _, value in self.options do
          local new_option = option:Clone()
          new_option.Parent = Options
          new_option.Text = value

          -- Set initial color for option text in the list
          if value == Library.Flags[self.flag] then
            new_option.TextColor3 = RED_ACCENT_COLOR -- Initial selected option is red
          else
            new_option.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Other options are grey
          end
          new_option.TextTransparency = 0 -- Base transparency

          new_option.MouseButton1Click:Connect(function()
            Library.Flags[self.flag] = value

            if open then
              dropdown.Box.SelectedOptionLabel.Text = Library.Flags[self.flag]
            end
            self.callback(Library.Flags[self.flag])
            Library.save_flags()

            Dropdown.select_option({
              new_option = new_option,
              flag = self.flag,
            })
            open = false
            Dropdown.close(self)
          end)
        end
      end

      if not Library.Flags[self.flag] then
        Library.Flags[self.flag] = self.option
      end

      self.callback(Library.Flags[self.flag])
      Dropdown.update(self)
      dropdown.Box.SelectedOptionLabel.Text = Library.Flags[self.flag] -- Set initial selected text

      dropdown.MouseButton1Click:Connect(function()
        open = not open

        if open then
          Dropdown.open(self)
        else
          Dropdown.close(self)
        end
      end)

      return Dropdown
    end

    function Module:create_image()
      local section = self.section == "left" and left_section or right_section

      local image = Instance.new("ImageLabel")
      image.Name = "Game"
      image.Parent = section
      image.AnchorPoint = Vector2.new(0.5, 0.5)
      image.Position = UDim2.new(0.5, 0, 0.5, 0)
      image.Size = UDim2.new(0, 215, 0, 120)
      image.BackgroundTransparency = 1
      image.BorderColor3 = RED_ACCENT_COLOR
      image.BorderSizePixel = 1

      image.Image = self.image

      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 7)
      UICorner.Parent = image
    end

    function Module:create_textbox()
      local section = self.section == "left" and left_section or right_section
      local Textbox = {}

      -- TextLabel for the textbox name
      local nameLabel = Instance.new("TextLabel")
      nameLabel.Name = "TextboxName"
      nameLabel.Parent = section
      nameLabel.AnchorPoint = Vector2.new(0, 0.5)
      nameLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      nameLabel.BackgroundTransparency = 1.000
      nameLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      nameLabel.BorderSizePixel = 0
      nameLabel.Position = UDim2.new(0.04, 0, 0.0, 0) -- First item in list layout
      nameLabel.Size = UDim2.new(0, 151, 0, 15)
      nameLabel.ZIndex = 2
      nameLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      nameLabel.TextColor3 = RED_ACCENT_COLOR -- Red text
      nameLabel.TextScaled = false -- Disable text scaling
      nameLabel.TextSize = 14.000 -- Explicit text size
      nameLabel.TextWrapped = true
      nameLabel.TextXAlignment = Enum.TextXAlignment.Left
      nameLabel.Text = self.name

      local textbox = Instance.new("Frame") -- Use Frame for general container
      textbox.Name = "TextBox"
      textbox.Parent = section
      textbox.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      textbox.BorderColor3 = RED_ACCENT_COLOR
      textbox.BorderSizePixel = 1
      textbox.Size = UDim2.new(0, 215, 0, 36)

      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = textbox

      local Box = Instance.new("Frame")
      Box.Name = "Box"
      Box.Parent = textbox
      Box.AnchorPoint = Vector2.new(0.5, 0)
      Box.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR
      Box.BorderColor3 = RED_ACCENT_COLOR
      Box.BorderSizePixel = 1
      Box.Position = UDim2.new(0.5, 0, 0.150000006, 0)
      Box.Size = UDim2.new(0, 202, 0, 25)
      Box.ZIndex = 2

      local UICorner_2 = Instance.new("UICorner")
      UICorner_2.CornerRadius = UDim.new(0, 3)
      UICorner_2.Parent = Box

      local TextHolder = Instance.new("TextBox")
      TextHolder.Name = "TextHolder"
      TextHolder.Parent = Box
      TextHolder.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR -- Matches Box background
      TextHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
      TextHolder.BorderSizePixel = 0
      TextHolder.Position = UDim2.new(0.0445544571, 0, 0.239999995, 0)
      TextHolder.Size = UDim2.new(0, 182, 0, 13)
      TextHolder.ZIndex = 2
      TextHolder.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      TextHolder.Text = ""
      TextHolder.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray text for input
      TextHolder.TextSize = 14.000
      TextHolder.TextXAlignment = Enum.TextXAlignment.Left
      TextHolder.PlaceholderText = self.name
      TextHolder.PlaceholderColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray placeholder text

      if not Library.Flags[self.flag] then
        Library.Flags[self.flag] = self.value
      else
        TextHolder.Text = Library.Flags[self.flag]
      end

      self.callback(Library.Flags[self.flag])
      TextHolder.FocusLost:Connect(function()
        Library.Flags[self.flag] = TextHolder.Text
        self.callback(Library.Flags[self.flag])
        Library.save_flags()
      end)

      function Textbox:update(text)
        TextHolder.Text = text
        self.callback(text)
      end

      return Textbox
    end
    function Module:create_keybind()
      local section = self.section == "left" and left_section or right_section

      -- TextLabel for the keybind name
      local nameLabel = Instance.new("TextLabel")
      nameLabel.Name = "KeybindName"
      nameLabel.Parent = section
      nameLabel.AnchorPoint = Vector2.new(0, 0.5)
      nameLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      nameLabel.BackgroundTransparency = 1.000
      nameLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      nameLabel.BorderSizePixel = 0
      nameLabel.Position = UDim2.new(0.04, 0, 0.0, 0) -- First item in list layout
      nameLabel.Size = UDim2.new(0, 155, 0, 15)
      nameLabel.ZIndex = 2
      nameLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      nameLabel.TextColor3 = RED_ACCENT_COLOR -- Red text
      nameLabel.TextScaled = false -- Disable text scaling
      nameLabel.TextSize = 14.000 -- Explicit text size
      nameLabel.TextWrapped = true
      nameLabel.TextXAlignment = Enum.TextXAlignment.Left
      nameLabel.Text = self.name

      local keybind = Instance.new("TextButton") -- Remains TextButton for direct click interaction
      keybind.Name = "Keybind"
      keybind.Parent = section
      keybind.BackgroundColor3 = ELEMENT_BACKGROUND_COLOR
      keybind.BorderColor3 = RED_ACCENT_COLOR
      keybind.BorderSizePixel = 1
      keybind.Position = UDim2.new(0, 0, 0, 0) -- Position managed by UIListLayout
      keybind.Size = UDim2.new(0, 215, 0, 37)
      keybind.AutoButtonColor = false
      keybind.Font = Enum.Font.SourceSans
      keybind.Text = ""
      keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
      keybind.TextSize = 14.000

      local UICorner = Instance.new("UICorner")
      UICorner.CornerRadius = UDim.new(0, 5)
      UICorner.Parent = keybind

      local Box = Instance.new("Frame")
      Box.Name = "Box"
      Box.Parent = keybind
      Box.AnchorPoint = Vector2.new(0.5, 0.5)
      Box.BackgroundColor3 = INNER_ELEMENT_BACKGROUND_COLOR
      Box.BorderColor3 = RED_ACCENT_COLOR
      Box.BorderSizePixel = 1
      Box.Position = UDim2.new(0.9, 0, 0.472972959, 0)
      Box.Size = UDim2.new(0, 30, 0, 20)

      local UICorner_2 = Instance.new("UICorner")
      UICorner_2.CornerRadius = UDim.new(0, 3)
      UICorner_2.Parent = Box

      local KeycodeTextLabel = Instance.new("TextLabel")
      KeycodeTextLabel.Parent = Box
      KeycodeTextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
      KeycodeTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
      KeycodeTextLabel.BackgroundTransparency = 1.000
      KeycodeTextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
      KeycodeTextLabel.BorderSizePixel = 0
      KeycodeTextLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
      KeycodeTextLabel.Size = UDim2.new(0, 29, 0, 15)
      KeycodeTextLabel.ZIndex = 2
      KeycodeTextLabel.FontFace = Font.new(
        "rbxasset://fonts/families/Montserrat.json",
        Enum.FontWeight.SemiBold
      )
      KeycodeTextLabel.TextColor3 = INACTIVE_GREY_TEXT_COLOR -- Gray keycode text
      KeycodeTextLabel.TextScaled = false -- Disable text scaling
      KeycodeTextLabel.TextSize = 14.000 -- Explicit text size
      KeycodeTextLabel.TextWrapped = true

      -- Initial text setting
      if not Library.Flags[self.flag] then
        Library.Flags[self.flag] = self.keycode.Name
      end
      KeycodeTextLabel.Text = Library.Flags[self.flag]

      keybind.MouseButton1Click:Connect(function()
        KeycodeTextLabel.Text = "..."
        local a, b = UserInputService.InputBegan:Wait()
        if a.KeyCode.Name ~= "Unknown" then
          KeycodeTextLabel.Text = a.KeyCode.Name
          Library.Flags[self.flag] = a.KeyCode.Name
          Library.save_flags()
        end
      end)

      UserInputService.InputBegan:Connect(function(current, pressed)
        if not pressed then
          if current.KeyCode.Name == Library.Flags[self.flag] then
            self.callback(Library.Flags[self.flag])
          end
        end
      end)
    end
    return Module
  end
  return Tab
end
return Library
